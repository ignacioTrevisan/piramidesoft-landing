// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//Forzanod redeploy
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../data"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(uuid())
  titulo      String
  descripcion String
  precioAntes Decimal?
  precioAhora Decimal
  imagenes    String[]
  video       String
  modulos     Modulo[] // Relación uno a muchos
  url_demo    String?
  url_full    String?
  tipoId      String
  tipo        Tipo        @relation(fields: [tipoId], references: [id])
  visible     Boolean     @default(true)
  consultas   Consultas[] // Relación con consultas
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Modulo {
  id         String   @id @default(uuid())
  titulo     String
  subtitulos String[]
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
}

model Tipo {
  id        String    @id @default(uuid())
  titulo    String
  productos Product[] // <- relación inversa
}

enum ConsultaStatus {
  PENDIENTE
  ATENDIDA
}

enum Role {
  admin
  user
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  role        Role          @default(user)
  comentarios BlogComment[]
  likes       BlogLike[]
}

model Consultas {
  id          String         @id @default(uuid())
  nombre      String
  descripcion String
  email       String
  numero      String
  productId   String? // Opcional, para consultas sobre productos específicos
  product     Product?       @relation(fields: [productId], references: [id])
  status      ConsultaStatus @default(PENDIENTE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  statsMes    String
  stats       Stats          @relation(fields: [statsMes], references: [mes])

  @@index([status])
  @@index([createdAt])
}

model Blog {
  id          String        @id @default(uuid())
  titulo      String
  contenido   String
  resumen     String
  imagen      String
  visible     Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comentarios BlogComment[]
  likes       BlogLike[]
}

model Stats {
  mes                 String      @id @unique
  userViews           UserView[]
  cantidadDeProductos Int
  cantidadDeBlogs     Int
  cantidadDeConsultas Consultas[]
}

model UserView {
  id       String @id @default(uuid())
  ip       String
  statsMes String
  stats    Stats  @relation(fields: [statsMes], references: [mes])
}

model BlogComment {
  id        String   @id @default(uuid())
  contenido String
  blogId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@index([userId])
}

model BlogLike {
  id     String @id @default(uuid())
  blogId String
  userId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogId, userId]) // Un usuario solo puede dar like una vez por blog
  @@index([blogId])
  @@index([userId])
}

model Historial {
  id          String   @id @default(uuid())
  descripcion String
  createdAt   DateTime @default(now())
}
